// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// USER MODELS
model User {
  id            String    @id @default(cuid())
  walletAddress String    @unique
  createdAt     DateTime  @default(now())
  lastLoginAt   DateTime? @updatedAt
  username      String?   @unique
  avatar        String?
  bio           String?
  NFTid         String?
  isVerified    Boolean   @default(false)
  
  watchlist     Watchlist[]
  offers        Offer[]
  analytics     DomainAnalytics[]
  dealParticipations DealParticipation[]
  notifications Notification[]
  activities    Activity[]
  landingPages  DomainLandingPage[]
  
  @@index([walletAddress])
  @@index([username])
}

// DOMAIN MODELS
model Domain {
  id              String   @id @default(cuid())
  name            String   @unique
  tld             String
  tokenId         String   @unique
  owner           String
  registrationDate DateTime?
  expiryDate      DateTime?
  isListed        Boolean  @default(false)
  price           String?
  currency        String   @default("ETH")
  description     String?  @db.Text
  keywords        String[]
  ogImage         String?
  views           Int      @default(0)
  watchCount      Int      @default(0)
  offerCount      Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  watchlist       Watchlist[]
  offers          Offer[]
  analytics       DomainAnalytics[]
  activities      Activity[]
  deals           Deal[]
  landingPage     DomainLandingPage?
  
  @@index([name])
  @@index([tokenId])
  @@index([owner])
  @@index([isListed])
}

model Watchlist {
  id        String   @id @default(cuid())
  userId    String
  domainId  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  domain    Domain   @relation(fields: [domainId], references: [id], onDelete: Cascade)
  
  @@unique([userId, domainId])
}

// TRADING MODELS
model Offer {
  id          String   @id @default(cuid())
  externalId  String   @unique
  domainId    String
  offerer     String
  userId      String?
  amount      String
  currency    String   @default("ETH")
  status      OfferStatus @default(ACTIVE)
  expiryDate  DateTime
  createdAt   DateTime @default(now())
  
  domain      Domain   @relation(fields: [domainId], references: [id], onDelete: Cascade)
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([domainId])
  @@index([status])
}

enum OfferStatus {
  ACTIVE
  ACCEPTED
  REJECTED
  EXPIRED
  CANCELLED
}

// COMMUNITY DEALS
model Deal {
  id              String   @id @default(cuid())
  contractDealId  String?  @unique // Deal ID from smart contract
  xmtpGroupId     String?  @unique // XMTP group conversation ID
  domainId        String
  domainName      String   // Domain name from contract
  creatorId       String
  creatorAddress  String   // Creator wallet address from contract
  title           String
  description     String?  @db.Text
  targetPrice     String
  minContribution String
  maxParticipants Int      @default(10)
  status          DealStatus @default(ACTIVE)
  currentAmount   String   @default("0")
  participantCount Int     @default(0)
  startDate       DateTime @default(now())
  endDate         DateTime
  createdAt       DateTime @default(now())
  
  // Contract specific fields
  contractDeadline BigInt?  // Unix timestamp from contract
  purchased        Boolean  @default(false)
  domainTokenId    String?  // NFT token ID if purchased
  fractionalTokenAddress String? // Address of fractional token
  
  domain          Domain   @relation(fields: [domainId], references: [id], onDelete: Cascade)
  participants    DealParticipation[]
  messages        DealMessage[]
  votes           DealVote[]
  
  @@index([domainId])
  @@index([status])
  @@index([contractDealId])
  @@index([domainName])
  @@index([xmtpGroupId])
}

enum DealStatus {
  ACTIVE
  FUNDED
  COMPLETED
  CANCELLED
  EXPIRED
}

model DealParticipation {
  id              String   @id @default(cuid())
  dealId          String
  userId          String
  walletAddress   String   // Participant wallet address
  contribution    String
  sharePercentage Float    @default(0) // Ownership percentage
  joinedAt        DateTime @default(now())
  createdAt       DateTime @default(now())
  
  deal            Deal     @relation(fields: [dealId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([dealId, userId])
  @@index([walletAddress])
}

// Deal room messages (stored for persistence alongside XMTP)
model DealMessage {
  id              String   @id @default(cuid())
  dealId          String
  senderAddress   String
  senderInboxId   String?  // XMTP inbox ID
  content         String   @db.Text
  messageType     MessageType @default(TEXT)
  metadata        Json?    // Additional message data
  createdAt       DateTime @default(now())
  
  deal            Deal     @relation(fields: [dealId], references: [id], onDelete: Cascade)
  
  @@index([dealId])
  @@index([senderAddress])
  @@index([createdAt])
}

enum MessageType {
  TEXT
  TRADE_CARD
  VOTE
  SYSTEM
  MILESTONE
}

// Voting system for deal decisions
model DealVote {
  id              String   @id @default(cuid())
  dealId          String
  proposalHash    String   // Hash of the proposal
  proposalTitle   String
  proposalText    String   @db.Text
  proposalType    VoteType
  voterAddress    String
  vote            Boolean  // true = yes, false = no
  votingPower     Float    // Based on contribution percentage
  votedAt         DateTime @default(now())
  
  deal            Deal     @relation(fields: [dealId], references: [id], onDelete: Cascade)
  
  @@unique([dealId, proposalHash, voterAddress])
  @@index([dealId])
  @@index([proposalHash])
}

enum VoteType {
  ACCEPT_OFFER
  CHANGE_STRATEGY
  DISTRIBUTE_FUNDS
  DOMAIN_USAGE
  GENERAL
}

// ANALYTICS
model DomainAnalytics {
  id        String   @id @default(cuid())
  domainId  String
  userId    String?
  event     AnalyticsEvent
  metadata  Json?
  timestamp DateTime @default(now())
  
  domain    Domain   @relation(fields: [domainId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([domainId])
  @@index([event])
}

enum AnalyticsEvent {
  PAGE_VIEW
  DOMAIN_CLICK
  OFFER_MADE
  BUY_CLICK
  MESSAGE_SENT
  WATCHLIST_ADD
  DEAL_CREATED
}

// ACTIVITY FEED
model Activity {
  id          String   @id @default(cuid())
  userId      String?
  domainId    String?
  type        ActivityType
  title       String
  description String?
  createdAt   DateTime @default(now())
  
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  domain      Domain?  @relation(fields: [domainId], references: [id], onDelete: SetNull)
  
  @@index([type])
  @@index([createdAt])
}

enum ActivityType {
  DOMAIN_LISTED
  DOMAIN_SOLD
  OFFER_MADE
  DEAL_CREATED
  DEAL_FUNDED
}

// NOTIFICATIONS
model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isRead])
}

enum NotificationType {
  OFFER_RECEIVED
  OFFER_ACCEPTED
  DOMAIN_SOLD
  DEAL_FUNDED
  MESSAGE_RECEIVED
}

// CUSTOM LANDING PAGES
model DomainLandingPage {
  id              String   @id @default(cuid())
  domainId        String   @unique
  ownerId         String
  
  // Branding
  primaryColor    String   @default("#3b82f6")
  secondaryColor  String   @default("#1e293b")
  accentColor     String   @default("#8b5cf6")
  logoUrl         String?
  heroImageUrl    String?
  heroVideoUrl    String?
  fontFamily      String   @default("Inter")
  
  // SEO Customization
  customTitle     String?
  customDescription String? @db.Text
  customOgImage   String?
  customKeywords  String[]
  
  // Content Sections (JSON array of section configs)
  sections        Json     @default("[]")
  
  // Settings
  template        String   @default("default")
  isPublished     Boolean  @default(false)
  showOrderbook   Boolean  @default(true)
  showAnalytics   Boolean  @default(true)
  showOffers      Boolean  @default(true)
  
  // Custom CTAs
  primaryCTA      String   @default("Buy Now")
  secondaryCTA    String   @default("Make Offer")
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  domain          Domain   @relation(fields: [domainId], references: [id], onDelete: Cascade)
  owner           User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  @@index([domainId])
  @@index([ownerId])
  @@index([isPublished])
}

